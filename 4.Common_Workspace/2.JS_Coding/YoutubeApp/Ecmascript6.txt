function (argument) {
    ...
    do something
    ...
} <--this is ES5 Syntax
---------------------------------

(args) => {
    do something
}  <--this is ES6 Syntax

(arg) => {} 
//the parantheses () are sometimes optionsal depending on no of arguments you have
//The curly brackets {} are also sometimes optional 

double = (x) => {
    return x*2
    }
//or
double = x => x*2
//or
double
//is the same as

function double(x){
    return x*2
}
--------------------------------------------------
var elements = [
    'Hydrogen',
    'Helium',
    'Lithium',
    'Beryllium'
  ];
  
  var a,b,c,d,e,f,g;

  // This statement returns the array: [8, 6, 7, 9]
  a = elements.map(function(element) {
    return element.length;
  });
  
  // The regular function above can be written as the arrow function below
  b = elements.map((element) => {
    return element.length;
  }); // [8, 6, 7, 9]
  
  // When there is only one parameter, we can remove the surrounding parentheses
  c = elements.map(element => {
    return element.length;
  }); // [8, 6, 7, 9]
  
  // When the only statement in an arrow function is `return`, we can remove `return` and remove
  // the surrounding curly brackets
  d = elements.map(element => element.length); // [8, 6, 7, 9]
------------------------------------------------------------------------------

  Arrow functions do not have their own "this" keyword property.
  
  var obj = { // does not create a new scope
    i: 10,
    b: () => console.log(this.i, this),
    c: function() {
      console.log(this.i, this);
    }
  }
  
  obj.b(); // prints undefined, Window {...} (or the global object)
  obj.c(); // prints 10, Object {...}
-------------------------------------------------------------------------------

for of loop
The JavaScript for/of statement loops through the values of iterable objects.
for/of lets you loop over data structures that are iterable such as Arrays, Strings.

for (variable of iterable) {
  // code block to be executed
}

variable - For every iteration, the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.

iterable - An object that has iterable properties.

Looping over an Array

Example

var cars = ["BMW", "Volvo", "Mini"];
var x;

for (x of cars) {
console.log(x)

}
------------------------------------------------------------------------------------
Object & Array destructuring
We know that we can add a single property,extract a property add multiple properties to an object.

var person = {}
person.name = 'karthik';
person.id = 'sm_090';
person.location = 'India';
// creating property one by one

const name = person.name
const id = person.id
// extracting property one by one

// creating multiple properties together by using object literal notation
var person = {
    name:"karthik",
    id:"sm_090",
    location:"India"
}

var name = person.name
var id = person.id
var location = person.location
Destructuring allows us to extract multiple properties from an object


const { name, id, location } = person;
// The code can now be written in a better way now
You can also destructure from return values from other functions.
If you have an api call and it returns a large object.

function getData(){
    let count = 5
    let url = '127.0.0.1:8000'
    let obj = {
        count,
        url,
    }
    return obj
}

var { count, url } = getData()
--------------------------------------------------------------------------------

Array Destructuring
We can do the same with arrays as well
// array destructuring
// standard way 
const arr = ['MASAI','INDIA','EDTECH']
var name = arr[0]
var location = arr[1]
var desc = arr[2]

// es6
var [name,location,desc] = arr
console.log(name,location,desc)

// using destructuring in split
name = 'albert sebastian'
const [fname, lname] = name.split(' ')
console.log(fname, lname)

// use const
var person = {
    f:'swanand',
    l:'kadam',
    i:'swanand7'
}

var {f:fname,l:lname,i:id} = person

-----------------------------------------------------------------------------------
Implementing in function arguments:

function fetchData(baseUrl,query,maxResults,orderby){
}
fetchData(' https://www.googleapis.com/youtube/v3/search','masai',10,'date')

// This can cause issues because we need to pass the exact order, and can make the function complicated
// Also this function doesnt handle default values
---------------------------------------------------------------------------------

We can use object destructuring:

function fetchData({baseUrl,query,maxResults,orderby}){

}

// we can change the order
fetchData({
    baseUrl:'https://www.googleapis.com/youtube/v3/search',
    orderby:'date',
    maxResults:10,
    query:'masai'
    
})
------------------------------------------------------------------------------------
function sum(x, y, z) {
  return x + y + z; 
}
// Pass each elem of array as argument
sum(...[1,2,3]) == 6

// x = 1
// y = 2
// z = 3
In the example below the var abc and contains 3 values each. The spread operator basically lays out the entire array into seperate elements. alpha contains 6 elements.

var abc = ['a', 'b', 'c'];
var def = ['d', 'e', 'f'];
var alpha = [ ...abc, ...def ];
console.log(alpha)// alpha == ['a', 'b', 'c', 'd', 'e', 'f'];

----------------------------------------------------------------------------------

function sum(x, y, z) {
  return x + y + z; 
}
// Pass each elem of array as argument
sum(...[1,2,3]) == 6

// x = 1
// y = 2
// z = 3
In the example below the var abc and contains 3 values each. The spread operator basically lays out the entire array into seperate elements. alpha contains 6 elements.

var abc = ['a', 'b', 'c'];
var def = ['d', 'e', 'f'];
var alpha = [ ...abc, ...def ];
console.log(alpha)// alpha == ['a', 'b', 'c', 'd', 'e', 'f'];
-----------------------------------------------------------------------------------
